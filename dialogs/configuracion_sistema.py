from PySide6.QtWidgets import (QDialog, QVBoxLayout, QGroupBox, QRadioButton, QPushButton, QLabel,
                                   QHBoxLayout, QMessageBox)
from PySide6.QtCore import Signal
from core.configuracion import guardar_configuracion_sistema, obtener_configuracion_sistema, config_signals

class ConfiguracionSistemaDialog(QDialog):
    # configuracion_actualizada = Signal(dict)  # Emitir cambios si quer√©s actualizar la sesi√≥n

    def __init__(self, sesion, config_sistema, parent=None):
        super().__init__(parent)
        self.setWindowTitle("‚öôÔ∏è Configuraci√≥n de sistema")
        self.setMinimumWidth(400)
        self.sesion = sesion
        self.config_sistema = config_sistema
        self.setup_ui()
        self.cargar_configuraciones()

    def setup_ui(self):
        self.layout = QVBoxLayout(self)

        # üß≠ Secci√≥n: Modo de c√≥digo de barras
        self.group_codigo = QGroupBox("Modo de c√≥digo de barra")
        self.radio_auto = QRadioButton("üîÑ Generar autom√°ticamente")
        self.radio_manual = QRadioButton("‚å®Ô∏è Ingresar manualmente")
        self.radio_mixto = QRadioButton("‚öôÔ∏è Modo mixto")

        codigo_layout = QVBoxLayout()
        codigo_layout.addWidget(self.radio_auto)
        codigo_layout.addWidget(self.radio_manual)
        codigo_layout.addWidget(self.radio_mixto)
        self.group_codigo.setLayout(codigo_layout)

        # üì¶ Placeholder para futuras configuraciones
        self.group_otros = QGroupBox("Otras configuraciones (pr√≥ximamente)")
        otros_layout = QVBoxLayout()
        otros_layout.addWidget(QLabel("üß™ Aqu√≠ podr√°s elegir temas, idioma, etc."))
        self.group_otros.setLayout(otros_layout)

        # ‚úÖ Botones
        self.btn_guardar = QPushButton("üíæ Guardar preferencias")
        self.btn_cancelar = QPushButton("‚ùå Cancelar")
        btn_layout = QHBoxLayout()
        btn_layout.addStretch()
        btn_layout.addWidget(self.btn_guardar)
        btn_layout.addWidget(self.btn_cancelar)

        # üìê Ensamblar todo
        self.layout.addWidget(self.group_codigo)
        self.layout.addWidget(self.group_otros)
        self.layout.addLayout(btn_layout)

        # üîó Conexiones
        self.btn_guardar.clicked.connect(self.guardar_configuraciones)
        self.btn_cancelar.clicked.connect(self.reject)

    def cargar_configuraciones(self):
        # Modo de c√≥digo de barra
        modo = self.config_sistema.get("modo_codigo_barra", "mixto")
        if modo == "auto":
            self.radio_auto.setChecked(True)
        elif modo == "manual":
            self.radio_manual.setChecked(True)
        else:
            self.radio_mixto.setChecked(True)

    def guardar_configuraciones(self):
        # Modo de codigo de barra
        if self.radio_auto.isChecked():
            modo = "auto"
        elif self.radio_manual.isChecked():
            modo = "manual"
        else:
            modo = "mixto"
        self.config_sistema["modo_codigo_barra"] = modo

        # üîÑ Actualizar sesi√≥n y emitir se√±al
        guardar_configuracion_sistema(self.config_sistema)
        config_signals.configuracion_actualizada.emit()
        self.config_sistema = obtener_configuracion_sistema()

        QMessageBox.information(self, "Configuraci√≥n guardada", "‚úÖ Tus configuraciones fueron actualizadas.")
        self.accept()
